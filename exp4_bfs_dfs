def bfs(graph, start_node):
    visited = set()
    queue = [start_node]
    
    while queue:
        current_node = queue.pop(0)
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                queue.append(neighbor)
    
    return visited

def dfs(visited, graph, node):
    if node not in visited:
        print(node, end=" ")
        visited.add(node)
        for neighbor in graph[node]:
            dfs(visited, graph, neighbor)

# Usage example
graph = {
'S' : ['A', 'B', 'C'],
'A' : ['S', 'D'],
'B' : ['S', 'D', 'G'],
'C' : ['S', 'G'],
'D' : ['A', 'B', 'G'],
'G' : ['B', 'C', 'D']
}
start_node = 'S'

print("Following is the Breadth-First Search:")
visited_bfs = bfs(graph, start_node)
for node in sorted(visited_bfs):
    print(node, end=' ')
print()

print("Following is the Depth-First Search:")
visited_dfs = set()
dfs(visited_dfs, graph, start_node)
print()
